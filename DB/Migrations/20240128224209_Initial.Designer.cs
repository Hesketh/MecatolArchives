// <auto-generated />
using System;
using Hesketh.MecatolArchives.DB;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Hesketh.MecatolArchives.DB.Migrations
{
    [DbContext(typeof(MecatolArchivesDbContext))]
    [Migration("20240128224209_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.1");

            modelBuilder.Entity("Hesketh.MecatolArchives.DB.Models.Colour", b =>
                {
                    b.Property<Guid>("Identifier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Hex")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Identifier");

                    b.ToTable("Colours");

                    b.HasData(
                        new
                        {
                            Identifier = new Guid("cbdfdda9-13bf-4a45-be5d-0882f6dcbad8"),
                            Hex = "",
                            Name = "_Unknown_"
                        },
                        new
                        {
                            Identifier = new Guid("564f166e-33cb-45cc-bca6-1b2d16b8bf60"),
                            Hex = "#000000",
                            Name = "Black"
                        },
                        new
                        {
                            Identifier = new Guid("53bf36a1-669c-41ed-9ced-4fa94ba038ee"),
                            Hex = "#FF0000",
                            Name = "Red"
                        },
                        new
                        {
                            Identifier = new Guid("e8ca7b27-00cd-4a2a-bc7f-17105e690e2d"),
                            Hex = "#008000",
                            Name = "Green"
                        },
                        new
                        {
                            Identifier = new Guid("51b6cc96-0e35-48f9-8665-b50bbe3fdb44"),
                            Hex = "#FFFF00",
                            Name = "Yellow"
                        },
                        new
                        {
                            Identifier = new Guid("a9c3b568-d781-452d-91ae-44b0cc8e7020"),
                            Hex = "#800080",
                            Name = "Purple"
                        },
                        new
                        {
                            Identifier = new Guid("43c078a5-0561-40f0-8adc-92afa32eaeb0"),
                            Hex = "#FFA500",
                            Name = "Orange"
                        },
                        new
                        {
                            Identifier = new Guid("daceda53-e450-4fce-82d4-ef1cdd312e38"),
                            Hex = "#FF00FF",
                            Name = "Magenta"
                        },
                        new
                        {
                            Identifier = new Guid("b5616b41-2821-4a27-85dc-fa81b899e578"),
                            Hex = "#0000FF",
                            Name = "Blue"
                        });
                });

            modelBuilder.Entity("Hesketh.MecatolArchives.DB.Models.Expansion", b =>
                {
                    b.Property<Guid>("Identifier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("PlayIdentifier")
                        .HasColumnType("TEXT");

                    b.HasKey("Identifier");

                    b.HasIndex("PlayIdentifier");

                    b.ToTable("Expansions");
                });

            modelBuilder.Entity("Hesketh.MecatolArchives.DB.Models.Faction", b =>
                {
                    b.Property<Guid>("Identifier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Identifier");

                    b.ToTable("Factions");
                });

            modelBuilder.Entity("Hesketh.MecatolArchives.DB.Models.Person", b =>
                {
                    b.Property<Guid>("Identifier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Identifier");

                    b.ToTable("People");
                });

            modelBuilder.Entity("Hesketh.MecatolArchives.DB.Models.Play", b =>
                {
                    b.Property<Guid>("Identifier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Map")
                        .HasColumnType("TEXT");

                    b.Property<uint>("PointGoal")
                        .HasColumnType("INTEGER");

                    b.Property<double>("RulesVersion")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("UtcDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("VariantIdentifier")
                        .HasColumnType("TEXT");

                    b.HasKey("Identifier");

                    b.HasIndex("VariantIdentifier");

                    b.ToTable("Plays");
                });

            modelBuilder.Entity("Hesketh.MecatolArchives.DB.Models.Player", b =>
                {
                    b.Property<Guid>("Identifier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ColourIdentifier")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Eliminated")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("FactionIdentifier")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PersonIdentifier")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PlayIdentifier")
                        .HasColumnType("TEXT");

                    b.Property<uint>("Points")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Winner")
                        .HasColumnType("INTEGER");

                    b.HasKey("Identifier");

                    b.HasIndex("ColourIdentifier");

                    b.HasIndex("FactionIdentifier");

                    b.HasIndex("PersonIdentifier");

                    b.HasIndex("PlayIdentifier");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("Hesketh.MecatolArchives.DB.Models.Variant", b =>
                {
                    b.Property<Guid>("Identifier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Identifier");

                    b.ToTable("Variants");
                });

            modelBuilder.Entity("Hesketh.MecatolArchives.DB.Models.Expansion", b =>
                {
                    b.HasOne("Hesketh.MecatolArchives.DB.Models.Play", null)
                        .WithMany("Expansions")
                        .HasForeignKey("PlayIdentifier");
                });

            modelBuilder.Entity("Hesketh.MecatolArchives.DB.Models.Play", b =>
                {
                    b.HasOne("Hesketh.MecatolArchives.DB.Models.Variant", "Variant")
                        .WithMany()
                        .HasForeignKey("VariantIdentifier")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Variant");
                });

            modelBuilder.Entity("Hesketh.MecatolArchives.DB.Models.Player", b =>
                {
                    b.HasOne("Hesketh.MecatolArchives.DB.Models.Colour", "Colour")
                        .WithMany()
                        .HasForeignKey("ColourIdentifier")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hesketh.MecatolArchives.DB.Models.Faction", "Faction")
                        .WithMany()
                        .HasForeignKey("FactionIdentifier")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hesketh.MecatolArchives.DB.Models.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonIdentifier")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hesketh.MecatolArchives.DB.Models.Play", "Play")
                        .WithMany("Players")
                        .HasForeignKey("PlayIdentifier")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Colour");

                    b.Navigation("Faction");

                    b.Navigation("Person");

                    b.Navigation("Play");
                });

            modelBuilder.Entity("Hesketh.MecatolArchives.DB.Models.Play", b =>
                {
                    b.Navigation("Expansions");

                    b.Navigation("Players");
                });
#pragma warning restore 612, 618
        }
    }
}
