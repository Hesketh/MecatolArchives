@page "/data/factions"
@using Hesketh.MecatolArchives.API.Client.Clients
@using Hesketh.MecatolArchives.API.Data
@using Hesketh.MecatolArchives.API.Client.Auth
@using Hesketh.MecatolArchives.Website.Helpers
@inject FactionClient FactionClient;
@inject IAdminCredentialStore Admin
@inject IDialogService DialogService

<PageTitle>Factions</PageTitle>

<MudDataGrid T="Faction" Items="@_factions"
             ReadOnly="@(!Admin.Set)"
             EditMode="DataGridEditMode.Form"
             CommittedItemChanges="CommitItemChanges"
             EditTrigger="DataGridEditTrigger.Manual"
             @ref="_dataGrid">
    <ColGroup>
        @if (_dataGrid.ReadOnly)
        {
            <col style="width: 50px;"/>
        }
        <col style="width: auto"/>
        @if (!_dataGrid.ReadOnly)
        {
            <col style="width: 100px"/>
        }
    </ColGroup>
    <ToolBarContent>
        <MudText Typo="Typo.h6">FACTIONS</MudText>
        <MudSpacer/>
        @if (!_dataGrid.ReadOnly)
        {
            <MudIconButton Icon="@Icons.Material.Filled.Add" OnClick="CreateNew"/>
        }
    </ToolBarContent>
    <Columns>
        <TemplateColumn Required="false" IsEditable="false" Sortable="false">
            <CellTemplate>
                <MudImage Src="@FactionIconHelper.GetFactionIcon(context.Item.Name)" Width="32"/>
            </CellTemplate>
        </TemplateColumn>
        <PropertyColumn Property="x => x.Name"/>
        <TemplateColumn Hidden="@(_dataGrid.ReadOnly)" CellClass="d-flex justify-end" Sortable="false">
            <CellTemplate>
                <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Filled.Delete" OnClick="@(() => Delete(context.Item))"/>
                <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Filled.Edit" OnClick="@context.Actions.StartEditingItemAsync"/>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
</MudDataGrid>

@code
{
    private MudDataGrid<Faction> _dataGrid = null!;
    private List<Faction> _factions = new();

    protected override async Task OnParametersSetAsync()
    {
        _factions = new List<Faction>(await FactionClient.GetAsync());
    }

    private async void Delete(Faction faction)
    {
        var delete = await DialogService.ShowMessageBox("Delete", $"Are you sure you wish to delete {faction.Name}?", "Yes", "No");
        if (delete != true)
            return;

        await FactionClient.DeleteAsync(faction.Identifier);
        _factions.Remove(faction);

        StateHasChanged();
    }

    private async void CreateNew()
    {
        await _dataGrid.SetEditingItemAsync(new Faction());
        StateHasChanged();
    }

    private async void CommitItemChanges(Faction faction)
    {
        if (faction.Identifier != Guid.Empty)
        {
            await FactionClient.UpdateAsync(faction);
        }
        else
        {
            var result = await FactionClient.CreateAsync(new API.Data.Post.Faction
                {
                    Name = faction.Name
                });
            faction.Identifier = result.Identifier;
            _factions.Add(faction);
        }

        StateHasChanged();
    }
}
