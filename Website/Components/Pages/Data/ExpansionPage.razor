@page "/data/expansions"
@using Hesketh.MecatolArchives.API.Client.Clients
@using Hesketh.MecatolArchives.API.Data
@using Hesketh.MecatolArchives.API.Client.Auth
@inject ExpansionClient ExpansionClient;
@inject IAdminCredentialStore Admin
@inject IDialogService DialogService

<PageTitle>Expansions</PageTitle>

<MudDataGrid T="Expansion" Items="@_expansions"
             ReadOnly="@(!Admin.Set)"
             EditMode="DataGridEditMode.Form"
             CommittedItemChanges="CommitItemChanges"
             EditTrigger="DataGridEditTrigger.Manual"
             @ref="_dataGrid">
    <ColGroup>
        <col style="width: auto"/>
        @if (!_dataGrid.ReadOnly)
        {
            <col style="width: 100px"/>
        }
    </ColGroup>
    <ToolBarContent>
        <MudText Typo="Typo.h6">EXPANSIONS</MudText>
        <MudSpacer/>
        @if (!_dataGrid.ReadOnly)
        {
            <MudIconButton Icon="@Icons.Material.Filled.Add" OnClick="CreateNew"/>
        }
    </ToolBarContent>
    <Columns>
        <PropertyColumn Property="x => x.Name"/>
        <TemplateColumn Hidden="@(_dataGrid.ReadOnly)" CellClass="d-flex justify-end" Sortable="false">
            <CellTemplate>
                <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Filled.Delete" OnClick="@(() => Delete(context.Item))"/>
                <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Filled.Edit" OnClick="@context.Actions.StartEditingItemAsync"/>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
</MudDataGrid>

@code
{
    private MudDataGrid<Expansion> _dataGrid = null!;
    private List<Expansion> _expansions = new();

    protected override async Task OnParametersSetAsync()
    {
        _expansions = new List<Expansion>(await ExpansionClient.GetAsync());
    }

    private async void Delete(Expansion expansion)
    {
        var delete = await DialogService.ShowMessageBox("Delete", $"Are you sure you wish to delete {expansion.Name}?", "Yes", "No");
        if (delete != true)
            return;

        await ExpansionClient.DeleteAsync(expansion.Identifier);
        _expansions.Remove(expansion);

        StateHasChanged();
    }

    private async void CreateNew()
    {
        await _dataGrid.SetEditingItemAsync(new Expansion());
        StateHasChanged();
    }

    private async void CommitItemChanges(Expansion expansion)
    {
        if (expansion.Identifier != Guid.Empty)
        {
            await ExpansionClient.UpdateAsync(expansion);
        }
        else
        {
            var result = await ExpansionClient.CreateAsync(new API.Data.Post.Expansion
            {
                Name = expansion.Name
            });
            expansion.Identifier = result.Identifier;
            _expansions.Add(expansion);
        }

        StateHasChanged();
    }
}