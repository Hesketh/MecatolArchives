@page "/stats/people/{PersonIdentifier:guid}"
@using Hesketh.MecatolArchives.API.Data
@using Hesketh.MecatolArchives.API.Client.Clients
@using Hesketh.MecatolArchives.Website.Components.Controls;
@using Hesketh.MecatolArchives.Website.Components.Dialogs
@using Hesketh.MecatolArchives.Website.Helpers
@inject StatisticClient StatisticClient
@inject PersonClient PersonClient
@inject PlayClient PlayClient
@inject IDialogService DialogService

<PageTitle>@_title</PageTitle>

<style>
    .mud-charts-xaxis text { writing-mode: vertical-rl; }
    .mud-chart-line        { overflow: visible; }
    .mud-charts-xaxis text { font-size: 12px; }
    .mud-charts-yaxis text { font-size: 12px; }
    .mud-chart-legend { display: none; visibility: hidden; }
</style>

<MudCard Style="margin-bottom: 16px">
    <MudCardHeader>
        <MudText Typo="Typo.h4" Style="margin: 16px">@_title</MudText>
    </MudCardHeader>
    <MudCardContent>
        <MudText Align="Align.Right">Longest Win Streak: @_biggestWinStreak @(_currentWinStreak > 0 ? $" (Current: {_currentWinStreak})" : "")</MudText>
        <StatisticTable Statistics="@(new[] { _statistics.Overall })"/>
        
        <MudGrid>
            <MudItem md="6" xs="12">
                <MudChart ChartType="ChartType.Line"
                          ChartSeries="@_playerStatsChart"
                          ChartOptions="@_playerStatsChartOptions"
                          XAxisLabels="@_playerStatsLabels"
                          Width="100%"
                          Height="350px"
                          CanHideSeries="true"/>
            </MudItem>
            
            <MudItem md="6" xs="12">
                <MudChart ChartType="ChartType.Donut" 
                          Width="100%" 
                          InputData="@_factionPlayCounts"
                          Height="350px">
                    <CustomGraphics>
                        <text class="donut-inner-text" 
                              x="50%" y="50%" 
                              dominant-baseline="middle"
                              text-anchor="middle" 
                              fill="white"
                              font-family="Helvetica" 
                              font-size="3">@_uniqueFactionsPlayed / @_totalUniqueFactions</text>
                        <text class="donut-inner-text" 
                              x="50%" y="60%" 
                              dominant-baseline="middle"
                              text-anchor="middle" 
                              fill="white"
                              font-family="Helvetica" 
                              font-size="2">Factions Played</text>
                    </CustomGraphics>
                </MudChart>
            </MudItem>
        </MudGrid>
    </MudCardContent>
</MudCard>

<MudCard Style="margin-bottom: 16px">
    <MudCardHeader>
        <MudText Typo="Typo.h4" Style="margin: 16px">Factions</MudText>
    </MudCardHeader>
    <MudCardContent>
        <StatisticTable Statistics="@_statistics.Stats"
                        NavigationFormat="stats/factions/{0}"
                        GetCustomNamePrefixFragment="GetFactionIcon" />
    </MudCardContent>
</MudCard>

<MudCard Style="margin-bottom: 16px">
    <MudCardHeader>
        <MudText Typo="Typo.h4" Style="margin: 16px">Achievements</MudText>
        @if (Authenticated)
        {
            <MudSpacer />
            <MudIconButton Icon="@Icons.Custom.Uncategorized.ChessKing"
                           OnClick="GrantRevokeAchievements" />
        }
    </MudCardHeader>
    <MudCardContent>
        <PersonAchievements @ref="_personAchievementsControl" PersonIdentifier="@PersonIdentifier" />
    </MudCardContent>
</MudCard>

<MudCard Style="margin-bottom: 16px">
    <MudCardHeader>
        <MudText Typo="Typo.h4" Style="margin: 16px">Play History</MudText>
    </MudCardHeader>
    <MudCardContent>
        <PlayHistory ReadOnly="true" Plays="@_playHistory" />
    </MudCardContent>
</MudCard>

@code
{
    [Parameter] public Guid PersonIdentifier { get; set; }
    [CascadingParameter] public bool Authenticated { get; set; } = false;

    private Statistics _statistics = new();
    private ICollection<Play> _playHistory = new List<Play>();
    private string _title = "Player";

    private int _biggestWinStreak = 0;
    private int _currentWinStreak = 0;

    private List<ChartSeries> _playerStatsChart = new();
    private ChartOptions _playerStatsChartOptions = new()
    {
        MaxNumYAxisTicks = 100,
    };
    private string[] _playerStatsLabels = [];

    private double[] _factionPlayCounts = [];
    private int _uniqueFactionsPlayed = 0;
    private int _totalUniqueFactions = 0;

    private PersonAchievements _personAchievementsControl = null!;

    protected override async Task OnParametersSetAsync()
    {
        _statistics = await StatisticClient.GetPersonFactionStatistics(PersonIdentifier);
        _playHistory = await PlayClient.GetPersonsPlaysAsync(PersonIdentifier);

        var person = await PersonClient.GetAsync(PersonIdentifier);
        _title = person.Name;

        CalculateBonusStats();
        CalculateFactionSpread();

        StateHasChanged();
    }

    private RenderFragment? GetFactionIcon(object o)
    {
        if (o is Statistic statistic)
        {
            return @<MudImage Width="32" Height="32" Src="@FactionIconHelper.GetFactionIcon(statistic.Name)" Style="display: inline-block;" />;
        }
        return null;
    }

    private async Task GrantRevokeAchievements()
    {
        var dialog = await DialogService.ShowAsync<GrantAchievementDialog>("Grant Achievements", new DialogParameters
        {
            { nameof(GrantAchievementDialog.PersonIdentifier), PersonIdentifier }
        });

        var result = await dialog.Result;
        if (!result.Canceled)
        {
            await _personAchievementsControl.Refresh();
        }
    }

    private void CalculateFactionSpread()
    {
        _factionPlayCounts = _statistics.Stats.Select(x => (double)x.Plays).ToArray();
        _totalUniqueFactions = _statistics.Stats.Count;
        _uniqueFactionsPlayed = _statistics.Stats.Count(x => x.Plays > 0);
    }

    private void CalculateBonusStats()
    {
        int streak = 0;

        var victoryPointsPerc = new List<double>();
        var avgVpPerc = new List<double>();
        var playerStatsLabels = new List<string>();
        var countingCurrentStreak = true;

        foreach (var play in _playHistory.OrderByDescending(x => x.UtcDate))
        {
            var player = play.Players.First(x => x.Person.Identifier == PersonIdentifier);

            // Add data to the line chart
            var points = player.Eliminated ? 0 : player.Points;
            victoryPointsPerc.Insert(0,((double)points / (double)play.PointGoal) * 100.0);

            avgVpPerc.Insert(0,_statistics.Overall.PointPercentage);

            playerStatsLabels.Insert(0,play.UtcDate.ToString("dd-MMM-yy"));

            // Calculate the longest winning streak
            if (player.Winner)
            {
                streak++;

                if (countingCurrentStreak)
                {
                    _currentWinStreak++;
                }
            }
            else if (!player.Winner)
            {
                countingCurrentStreak = false;

                if (_biggestWinStreak < streak)
                {
                    _biggestWinStreak = streak;
                }
                streak = 0;
            }
        }

        _playerStatsChart.Add(new ChartSeries
        {
            Data = victoryPointsPerc.ToArray(),
            Index = 0,
            IsVisible = true,
            Name = "VP"
        });

        _playerStatsChart.Add(new ChartSeries
        {
            Data = avgVpPerc.ToArray(),
            Index = 1,
            IsVisible = true,
            Name = "Avg"
        });

        _playerStatsChart.Add(new ChartSeries
        {
            Data = [0],
            Index = 2,
            IsVisible = true,
            Name = "0"
        });

        _playerStatsLabels = playerStatsLabels.ToArray();
    }
}